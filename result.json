{"traceEvents": [{"ph": "M", "pid": 7708, "tid": 7708, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 7708, "tid": 12168, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 7708, "tid": 12168, "ts": 796127656159.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 7708, "tid": 12168, "ts": 796127656160.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656164.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 7708, "tid": 12168, "ts": 796127656166.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656174.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_imp.acquire_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127656172.6, "ph": "X", "cat": "fee", "dur": 2.3, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 7708, "tid": 12168, "ts": 796127656179.8, "ph": "X", "cat": "fee", "dur": 10.1, "name": "_imp.is_builtin"}, {"pid": 7708, "tid": 12168, "ts": 796127656177.0, "ph": "X", "cat": "fee", "dur": 13.1, "name": "find_spec (<frozen importlib._bootstrap>:725)"}, {"pid": 7708, "tid": 12168, "ts": 796127656191.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.release_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127656191.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 7708, "tid": 12168, "ts": 796127656193.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127656193.1, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 7708, "tid": 12168, "ts": 796127656196.4, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_imp.is_frozen"}, {"pid": 7708, "tid": 12168, "ts": 796127656194.9, "ph": "X", "cat": "fee", "dur": 2.6, "name": "find_spec (<frozen importlib._bootstrap>:800)"}, {"pid": 7708, "tid": 12168, "ts": 796127656197.82, "ph": "X", "cat": "fee", "dur": 0.18, "name": "_imp.release_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127656197.8, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 7708, "tid": 12168, "ts": 796127656198.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127656198.8, "ph": "X", "cat": "fee", "dur": 0.22, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 7708, "tid": 12168, "ts": 796127656202.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656203.9, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656206.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656208.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656211.2, "ph": "X", "cat": "fee", "dur": 99.2, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656209.7, "ph": "X", "cat": "fee", "dur": 101.7, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656315.6, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656321.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656322.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656321.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656323.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656320.4, "ph": "X", "cat": "fee", "dur": 3.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656325.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656328.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656328.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656327.9, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656328.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656327.7, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656329.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656331.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656331.6, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656331.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656332.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656331.0, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656332.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656334.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656334.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656334.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656338.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656334.2, "ph": "X", "cat": "fee", "dur": 4.9, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656339.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656341.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656341.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656341.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656342.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656341.2, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656342.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656207.5, "ph": "X", "cat": "fee", "dur": 136.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656344.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656346.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656347.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656348.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656349.4, "ph": "X", "cat": "fee", "dur": 45.2, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656349.0, "ph": "X", "cat": "fee", "dur": 46.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656396.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656398.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656399.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656398.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656399.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656398.3, "ph": "X", "cat": "fee", "dur": 2.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656400.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656402.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656402.8, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656402.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656403.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656402.2, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656404.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656405.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656405.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656405.0, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656406.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656404.8, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656406.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656408.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656408.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656408.0, "ph": "X", "cat": "fee", "dur": 0.52, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656408.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656407.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656409.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656410.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656410.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656410.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656410.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656409.9, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656411.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656348.2, "ph": "X", "cat": "fee", "dur": 65.9, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656415.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656525.3, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656527.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656527.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656528.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656529.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656531.0, "ph": "X", "cat": "fee", "dur": 61.5, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656530.8, "ph": "X", "cat": "fee", "dur": 61.9, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656594.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656596.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656596.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656596.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656597.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656595.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656598.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656600.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656600.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656599.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656600.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656599.7, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656601.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656602.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656603.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656602.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656603.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656602.5, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656604.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656606.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656606.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656606.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656606.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656605.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656607.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656608.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656608.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656608.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656609.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656607.8, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656609.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656529.3, "ph": "X", "cat": "fee", "dur": 81.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656611.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656611.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656612.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656613.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656614.1, "ph": "X", "cat": "fee", "dur": 50.6, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656614.0, "ph": "X", "cat": "fee", "dur": 50.9, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656669.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656672.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656672.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656671.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656672.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656671.0, "ph": "X", "cat": "fee", "dur": 2.12, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656673.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656675.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656675.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656675.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656675.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656675.0, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656676.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656677.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656678.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656677.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656678.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656677.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656678.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656680.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656680.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656679.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656680.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656679.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656680.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656681.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656682.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656681.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656682.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656681.5, "ph": "X", "cat": "fee", "dur": 1.02, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656682.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656613.3, "ph": "X", "cat": "fee", "dur": 70.4, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656684.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656685.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656686.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656686.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656687.7, "ph": "X", "cat": "fee", "dur": 47.8, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656687.6, "ph": "X", "cat": "fee", "dur": 48.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656737.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656739.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656740.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656739.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656740.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656739.1, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656741.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656742.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656745.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656742.5, "ph": "X", "cat": "fee", "dur": 3.1, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656745.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656742.3, "ph": "X", "cat": "fee", "dur": 3.62, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656746.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656748.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656748.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656747.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656748.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656747.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656749.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656750.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656750.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656749.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656750.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656749.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656751.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656752.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656752.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656751.9, "ph": "X", "cat": "fee", "dur": 0.42, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656752.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656751.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656752.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656686.6, "ph": "X", "cat": "fee", "dur": 66.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656754.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656754.9, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656756.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656757.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656758.3, "ph": "X", "cat": "fee", "dur": 52.6, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656758.1, "ph": "X", "cat": "fee", "dur": 53.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656812.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656814.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656815.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656814.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656815.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656814.4, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656816.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656818.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656818.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656818.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656818.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656817.8, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656819.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656821.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656821.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656820.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656821.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656820.7, "ph": "X", "cat": "fee", "dur": 3.3, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656824.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656825.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656825.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656825.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656826.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656825.3, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656826.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656828.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656828.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656827.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656828.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656827.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656829.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656757.0, "ph": "X", "cat": "fee", "dur": 73.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656831.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656831.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656832.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656833.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656833.8, "ph": "X", "cat": "fee", "dur": 49.4, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656833.6, "ph": "X", "cat": "fee", "dur": 49.8, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656885.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656887.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656887.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656886.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656888.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656886.6, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656888.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656890.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656890.5, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656890.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656890.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656889.9, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656891.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656892.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656892.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656892.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656892.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656892.1, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656893.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656894.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656894.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656894.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656895.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656894.1, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656895.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656899.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656899.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656898.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656899.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656898.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656900.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656833.0, "ph": "X", "cat": "fee", "dur": 68.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656901.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656902.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656903.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656903.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656904.2, "ph": "X", "cat": "fee", "dur": 49.3, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656904.1, "ph": "X", "cat": "fee", "dur": 49.6, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127656955.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127656958.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656958.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656958.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656959.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656957.7, "ph": "X", "cat": "fee", "dur": 2.5, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656960.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656962.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656962.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656961.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656962.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656961.7, "ph": "X", "cat": "fee", "dur": 1.02, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656963.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656964.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656964.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656964.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656964.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656963.9, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656965.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656966.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656966.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656966.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656966.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656965.8, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656967.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656968.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656968.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127656967.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127656968.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127656967.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127656968.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656903.4, "ph": "X", "cat": "fee", "dur": 66.1, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127656970.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 7708, "tid": 12168, "ts": 796127656970.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1265)"}, {"pid": 7708, "tid": 12168, "ts": 796127656973.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 7708, "tid": 12168, "ts": 796127656974.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 7708, "tid": 12168, "ts": 796127656974.9, "ph": "X", "cat": "fee", "dur": 46.9, "name": "nt.stat"}, {"pid": 7708, "tid": 12168, "ts": 796127656974.8, "ph": "X", "cat": "fee", "dur": 47.3, "name": "_path_stat (<frozen importlib._bootstrap_external>:80)"}, {"pid": 7708, "tid": 12168, "ts": 796127657023.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_relax_case (<frozen importlib._bootstrap_external>:36)"}, {"pid": 7708, "tid": 12168, "ts": 796127657025.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657026.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657025.5, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127657026.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127657025.2, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127657027.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127657028.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657029.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657028.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127657029.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127657028.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127657030.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127657031.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657031.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657031.2, "ph": "X", "cat": "fee", "dur": 0.52, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127657031.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127657031.0, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127657032.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127657033.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657033.6, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657033.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127657033.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127657033.0, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127657034.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127657035.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657035.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 7708, "tid": 12168, "ts": 796127657035.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:64)"}, {"pid": 7708, "tid": 12168, "ts": 796127657036.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 7708, "tid": 12168, "ts": 796127657035.4, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_join (<frozen importlib._bootstrap_external>:62)"}, {"pid": 7708, "tid": 12168, "ts": 796127657036.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 7708, "tid": 12168, "ts": 796127656974.1, "ph": "X", "cat": "fee", "dur": 63.0, "name": "find_spec (<frozen importlib._bootstrap_external>:1431)"}, {"pid": 7708, "tid": 12168, "ts": 796127657040.1, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 7708, "tid": 12168, "ts": 796127656201.5, "ph": "X", "cat": "fee", "dur": 841.9, "name": "_get_spec (<frozen importlib._bootstrap_external>:1302)"}, {"pid": 7708, "tid": 12168, "ts": 796127656199.7, "ph": "X", "cat": "fee", "dur": 845.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1334)"}, {"pid": 7708, "tid": 12168, "ts": 796127657047.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 7708, "tid": 12168, "ts": 796127657046.8, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 7708, "tid": 12168, "ts": 796127656167.4, "ph": "X", "cat": "fee", "dur": 881.7, "name": "_find_spec (<frozen importlib._bootstrap>:890)"}, {"pid": 7708, "tid": 12168, "ts": 796127656163.9, "ph": "X", "cat": "fee", "dur": 886.2, "name": "find_spec (C:\\Program Files\\Python38\\lib\\importlib\\util.py:73)"}, {"pid": 7708, "tid": 12168, "ts": 796127656158.7, "ph": "X", "cat": "fee", "dur": 897.8, "name": "_get_module_details (C:\\Program Files\\Python38\\lib\\runpy.py:102)"}, {"pid": 7708, "tid": 12168, "ts": 796127656156.5, "ph": "X", "cat": "fee", "dur": 901.2, "name": "run_module (C:\\Program Files\\Python38\\lib\\runpy.py:195)"}, {"pid": 7708, "tid": 12168, "ts": 796127656153.8, "ph": "X", "cat": "fee", "dur": 904.6, "name": "<module> (<string>:1)"}, {"pid": 7708, "tid": 12168, "ts": 796127656004.3, "ph": "X", "cat": "fee", "dur": 1059.0, "name": "builtins.exec"}, {"pid": 7708, "tid": 12168, "ts": 796127657087.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "info (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:52)"}, {"pid": 7708, "tid": 12168, "ts": 796127657088.6, "ph": "X", "cat": "fee", "dur": 0.7, "name": "debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:48)"}, {"pid": 7708, "tid": 12168, "ts": 796127657093.9, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<lambda> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:261)"}, {"pid": 7708, "tid": 12168, "ts": 796127657093.4, "ph": "X", "cat": "fee", "dur": 1.4, "name": "<listcomp> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:268)"}, {"pid": 7708, "tid": 12168, "ts": 796127657096.3, "ph": "X", "cat": "fee", "dur": 1.2, "name": "list.sort"}, {"pid": 7708, "tid": 12168, "ts": 796127657090.0, "ph": "X", "cat": "fee", "dur": 7.8, "name": "_run_finalizers (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:245)"}, {"pid": 7708, "tid": 12168, "ts": 796127657100.4, "ph": "X", "cat": "fee", "dur": 1.1, "name": "current_process (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:37)"}, {"pid": 7708, "tid": 12168, "ts": 796127657103.4, "ph": "X", "cat": "fee", "dur": 3.0, "name": "_cleanup (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:61)"}, {"pid": 7708, "tid": 12168, "ts": 796127657102.3, "ph": "X", "cat": "fee", "dur": 4.5, "name": "active_children (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:43)"}, {"pid": 7708, "tid": 12168, "ts": 796127657107.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_cleanup (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:61)"}, {"pid": 7708, "tid": 12168, "ts": 796127657107.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "active_children (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:43)"}, {"pid": 7708, "tid": 12168, "ts": 796127657109.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:48)"}, {"pid": 7708, "tid": 12168, "ts": 796127657110.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<lambda> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:259)"}, {"pid": 7708, "tid": 12168, "ts": 796127657110.3, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:268)"}, {"pid": 7708, "tid": 12168, "ts": 796127657111.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.sort"}, {"pid": 7708, "tid": 12168, "ts": 796127657112.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.get"}, {"pid": 7708, "tid": 12168, "ts": 796127657113.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "sub_debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:44)"}, {"pid": 7708, "tid": 12168, "ts": 796127657117.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "nt.getpid"}, {"pid": 7708, "tid": 12168, "ts": 796127657119.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "sub_debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:44)"}], "viztracer_metadata": {"overflow": false, "version": "0.15.3"}, "file_info": {"files": {"C:\\Program Files\\Python38\\lib\\importlib\\util.py": ["\"\"\"Utility code for constructing importers, etc.\"\"\"\nfrom . import abc\nfrom ._bootstrap import module_from_spec\nfrom ._bootstrap import _resolve_name\nfrom ._bootstrap import spec_from_loader\nfrom ._bootstrap import _find_spec\nfrom ._bootstrap_external import MAGIC_NUMBER\nfrom ._bootstrap_external import _RAW_MAGIC_NUMBER\nfrom ._bootstrap_external import cache_from_source\nfrom ._bootstrap_external import decode_source\nfrom ._bootstrap_external import source_from_cache\nfrom ._bootstrap_external import spec_from_file_location\n\nfrom contextlib import contextmanager\nimport _imp\nimport functools\nimport sys\nimport types\nimport warnings\n\n\ndef source_hash(source_bytes):\n    \"Return the hash of *source_bytes* as used in hash-based pyc files.\"\n    return _imp.source_hash(_RAW_MAGIC_NUMBER, source_bytes)\n\n\ndef resolve_name(name, package):\n    \"\"\"Resolve a relative module name to an absolute one.\"\"\"\n    if not name.startswith('.'):\n        return name\n    elif not package:\n        raise ValueError(f'no package specified for {repr(name)} '\n                         '(required for relative module names)')\n    level = 0\n    for character in name:\n        if character != '.':\n            break\n        level += 1\n    return _resolve_name(name[level:], package, level)\n\n\ndef _find_spec_from_path(name, path=None):\n    \"\"\"Return the spec for the specified module.\n\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n\n    Dotted names do not have their parent packages implicitly imported. You will\n    most likely need to explicitly import all parent packages in the proper\n    order for a submodule to get the correct spec.\n\n    \"\"\"\n    if name not in sys.modules:\n        return _find_spec(name, path)\n    else:\n        module = sys.modules[name]\n        if module is None:\n            return None\n        try:\n            spec = module.__spec__\n        except AttributeError:\n            raise ValueError('{}.__spec__ is not set'.format(name)) from None\n        else:\n            if spec is None:\n                raise ValueError('{}.__spec__ is None'.format(name))\n            return spec\n\n\ndef find_spec(name, package=None):\n    \"\"\"Return the spec for the specified module.\n\n    First, sys.modules is checked to see if the module was already imported. If\n    so, then sys.modules[name].__spec__ is returned. If that happens to be\n    set to None, then ValueError is raised. If the module is not in\n    sys.modules, then sys.meta_path is searched for a suitable spec with the\n    value of 'path' given to the finders. None is returned if no spec could\n    be found.\n\n    If the name is for submodule (contains a dot), the parent module is\n    automatically imported.\n\n    The name and package arguments work the same as importlib.import_module().\n    In other words, relative module names (with leading dots) work.\n\n    \"\"\"\n    fullname = resolve_name(name, package) if name.startswith('.') else name\n    if fullname not in sys.modules:\n        parent_name = fullname.rpartition('.')[0]\n        if parent_name:\n            parent = __import__(parent_name, fromlist=['__path__'])\n            try:\n                parent_path = parent.__path__\n            except AttributeError as e:\n                raise ModuleNotFoundError(\n                    f\"__path__ attribute not found on {parent_name!r} \"\n                    f\"while trying to find {fullname!r}\", name=fullname) from e\n        else:\n            parent_path = None\n        return _find_spec(fullname, parent_path)\n    else:\n        module = sys.modules[fullname]\n        if module is None:\n            return None\n        try:\n            spec = module.__spec__\n        except AttributeError:\n            raise ValueError('{}.__spec__ is not set'.format(name)) from None\n        else:\n            if spec is None:\n                raise ValueError('{}.__spec__ is None'.format(name))\n            return spec\n\n\n@contextmanager\ndef _module_to_load(name):\n    is_reload = name in sys.modules\n\n    module = sys.modules.get(name)\n    if not is_reload:\n        # This must be done before open() is called as the 'io' module\n        # implicitly imports 'locale' and would otherwise trigger an\n        # infinite loop.\n        module = type(sys)(name)\n        # This must be done before putting the module in sys.modules\n        # (otherwise an optimization shortcut in import.c becomes wrong)\n        module.__initializing__ = True\n        sys.modules[name] = module\n    try:\n        yield module\n    except Exception:\n        if not is_reload:\n            try:\n                del sys.modules[name]\n            except KeyError:\n                pass\n    finally:\n        module.__initializing__ = False\n\n\ndef set_package(fxn):\n    \"\"\"Set __package__ on the returned module.\n\n    This function is deprecated.\n\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_package_wrapper(*args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(*args, **kwargs)\n        if getattr(module, '__package__', None) is None:\n            module.__package__ = module.__name__\n            if not hasattr(module, '__path__'):\n                module.__package__ = module.__package__.rpartition('.')[0]\n        return module\n    return set_package_wrapper\n\n\ndef set_loader(fxn):\n    \"\"\"Set __loader__ on the returned module.\n\n    This function is deprecated.\n\n    \"\"\"\n    @functools.wraps(fxn)\n    def set_loader_wrapper(self, *args, **kwargs):\n        warnings.warn('The import system now takes care of this automatically.',\n                      DeprecationWarning, stacklevel=2)\n        module = fxn(self, *args, **kwargs)\n        if getattr(module, '__loader__', None) is None:\n            module.__loader__ = self\n        return module\n    return set_loader_wrapper\n\n\ndef module_for_loader(fxn):\n    \"\"\"Decorator to handle selecting the proper module for loaders.\n\n    The decorated function is passed the module to use instead of the module\n    name. The module passed in to the function is either from sys.modules if\n    it already exists or is a new module. If the module is new, then __name__\n    is set the first argument to the method, __loader__ is set to self, and\n    __package__ is set accordingly (if self.is_package() is defined) will be set\n    before it is passed to the decorated function (if self.is_package() does\n    not work for the module it will be set post-load).\n\n    If an exception is raised and the decorator created the module it is\n    subsequently removed from sys.modules.\n\n    The decorator assumes that the decorated function takes the module name as\n    the second argument.\n\n    \"\"\"\n    warnings.warn('The import system now takes care of this automatically.',\n                  DeprecationWarning, stacklevel=2)\n    @functools.wraps(fxn)\n    def module_for_loader_wrapper(self, fullname, *args, **kwargs):\n        with _module_to_load(fullname) as module:\n            module.__loader__ = self\n            try:\n                is_package = self.is_package(fullname)\n            except (ImportError, AttributeError):\n                pass\n            else:\n                if is_package:\n                    module.__package__ = fullname\n                else:\n                    module.__package__ = fullname.rpartition('.')[0]\n            # If __package__ was not set above, __import__() will do it later.\n            return fxn(self, module, *args, **kwargs)\n\n    return module_for_loader_wrapper\n\n\nclass _LazyModule(types.ModuleType):\n\n    \"\"\"A subclass of the module type which triggers loading upon attribute access.\"\"\"\n\n    def __getattribute__(self, attr):\n        \"\"\"Trigger the load of the module and return the attribute.\"\"\"\n        # All module metadata must be garnered from __spec__ in order to avoid\n        # using mutated values.\n        # Stop triggering this method.\n        self.__class__ = types.ModuleType\n        # Get the original name to make sure no object substitution occurred\n        # in sys.modules.\n        original_name = self.__spec__.name\n        # Figure out exactly what attributes were mutated between the creation\n        # of the module and now.\n        attrs_then = self.__spec__.loader_state['__dict__']\n        original_type = self.__spec__.loader_state['__class__']\n        attrs_now = self.__dict__\n        attrs_updated = {}\n        for key, value in attrs_now.items():\n            # Code that set the attribute may have kept a reference to the\n            # assigned object, making identity more important than equality.\n            if key not in attrs_then:\n                attrs_updated[key] = value\n            elif id(attrs_now[key]) != id(attrs_then[key]):\n                attrs_updated[key] = value\n        self.__spec__.loader.exec_module(self)\n        # If exec_module() was used directly there is no guarantee the module\n        # object was put into sys.modules.\n        if original_name in sys.modules:\n            if id(self) != id(sys.modules[original_name]):\n                raise ValueError(f\"module object for {original_name!r} \"\n                                  \"substituted in sys.modules during a lazy \"\n                                  \"load\")\n        # Update after loading since that's what would happen in an eager\n        # loading situation.\n        self.__dict__.update(attrs_updated)\n        return getattr(self, attr)\n\n    def __delattr__(self, attr):\n        \"\"\"Trigger the load and then perform the deletion.\"\"\"\n        # To trigger the load and raise an exception if the attribute\n        # doesn't exist.\n        self.__getattribute__(attr)\n        delattr(self, attr)\n\n\nclass LazyLoader(abc.Loader):\n\n    \"\"\"A loader that creates a module which defers loading until attribute access.\"\"\"\n\n    @staticmethod\n    def __check_eager_loader(loader):\n        if not hasattr(loader, 'exec_module'):\n            raise TypeError('loader must define exec_module()')\n\n    @classmethod\n    def factory(cls, loader):\n        \"\"\"Construct a callable which returns the eager loader made lazy.\"\"\"\n        cls.__check_eager_loader(loader)\n        return lambda *args, **kwargs: cls(loader(*args, **kwargs))\n\n    def __init__(self, loader):\n        self.__check_eager_loader(loader)\n        self.loader = loader\n\n    def create_module(self, spec):\n        return self.loader.create_module(spec)\n\n    def exec_module(self, module):\n        \"\"\"Make the module load lazily.\"\"\"\n        module.__spec__.loader = self.loader\n        module.__loader__ = self.loader\n        # Don't need to worry about deep-copying as trying to set an attribute\n        # on an object would have triggered the load,\n        # e.g. ``module.__spec__.loader = None`` would trigger a load from\n        # trying to access module.__spec__.\n        loader_state = {}\n        loader_state['__dict__'] = module.__dict__.copy()\n        loader_state['__class__'] = module.__class__\n        module.__spec__.loader_state = loader_state\n        module.__class__ = _LazyModule\n", 300], "C:\\Program Files\\Python38\\lib\\runpy.py": ["\"\"\"runpy.py - locating and running Python code using the module namespace\n\nProvides support for locating and running Python scripts using the Python\nmodule namespace instead of the native filesystem.\n\nThis allows Python code to play nicely with non-filesystem based PEP 302\nimporters when locating support scripts as well as when importing modules.\n\"\"\"\n# Written by Nick Coghlan <ncoghlan at gmail.com>\n#    to implement PEP 338 (Executing Modules as Scripts)\n\n\nimport sys\nimport importlib.machinery # importlib first so we can test #15386 via -m\nimport importlib.util\nimport types\nfrom pkgutil import read_code, get_importer\n\n__all__ = [\n    \"run_module\", \"run_path\",\n]\n\nclass _TempModule(object):\n    \"\"\"Temporarily replace a module in sys.modules with an empty namespace\"\"\"\n    def __init__(self, mod_name):\n        self.mod_name = mod_name\n        self.module = types.ModuleType(mod_name)\n        self._saved_module = []\n\n    def __enter__(self):\n        mod_name = self.mod_name\n        try:\n            self._saved_module.append(sys.modules[mod_name])\n        except KeyError:\n            pass\n        sys.modules[mod_name] = self.module\n        return self\n\n    def __exit__(self, *args):\n        if self._saved_module:\n            sys.modules[self.mod_name] = self._saved_module[0]\n        else:\n            del sys.modules[self.mod_name]\n        self._saved_module = []\n\nclass _ModifiedArgv0(object):\n    def __init__(self, value):\n        self.value = value\n        self._saved_value = self._sentinel = object()\n\n    def __enter__(self):\n        if self._saved_value is not self._sentinel:\n            raise RuntimeError(\"Already preserving saved value\")\n        self._saved_value = sys.argv[0]\n        sys.argv[0] = self.value\n\n    def __exit__(self, *args):\n        self.value = self._sentinel\n        sys.argv[0] = self._saved_value\n\n# TODO: Replace these helpers with importlib._bootstrap_external functions.\ndef _run_code(code, run_globals, init_globals=None,\n              mod_name=None, mod_spec=None,\n              pkg_name=None, script_name=None):\n    \"\"\"Helper to run code in nominated namespace\"\"\"\n    if init_globals is not None:\n        run_globals.update(init_globals)\n    if mod_spec is None:\n        loader = None\n        fname = script_name\n        cached = None\n    else:\n        loader = mod_spec.loader\n        fname = mod_spec.origin\n        cached = mod_spec.cached\n        if pkg_name is None:\n            pkg_name = mod_spec.parent\n    run_globals.update(__name__ = mod_name,\n                       __file__ = fname,\n                       __cached__ = cached,\n                       __doc__ = None,\n                       __loader__ = loader,\n                       __package__ = pkg_name,\n                       __spec__ = mod_spec)\n    exec(code, run_globals)\n    return run_globals\n\ndef _run_module_code(code, init_globals=None,\n                    mod_name=None, mod_spec=None,\n                    pkg_name=None, script_name=None):\n    \"\"\"Helper to run code in new namespace with sys modified\"\"\"\n    fname = script_name if mod_spec is None else mod_spec.origin\n    with _TempModule(mod_name) as temp_module, _ModifiedArgv0(fname):\n        mod_globals = temp_module.module.__dict__\n        _run_code(code, mod_globals, init_globals,\n                  mod_name, mod_spec, pkg_name, script_name)\n    # Copy the globals of the temporary module, as they\n    # may be cleared when the temporary module goes away\n    return mod_globals.copy()\n\n# Helper to get the full name, spec and code for a module\ndef _get_module_details(mod_name, error=ImportError):\n    if mod_name.startswith(\".\"):\n        raise error(\"Relative module names not supported\")\n    pkg_name, _, _ = mod_name.rpartition(\".\")\n    if pkg_name:\n        # Try importing the parent to avoid catching initialization errors\n        try:\n            __import__(pkg_name)\n        except ImportError as e:\n            # If the parent or higher ancestor package is missing, let the\n            # error be raised by find_spec() below and then be caught. But do\n            # not allow other errors to be caught.\n            if e.name is None or (e.name != pkg_name and\n                    not pkg_name.startswith(e.name + \".\")):\n                raise\n        # Warn if the module has already been imported under its normal name\n        existing = sys.modules.get(mod_name)\n        if existing is not None and not hasattr(existing, \"__path__\"):\n            from warnings import warn\n            msg = \"{mod_name!r} found in sys.modules after import of \" \\\n                \"package {pkg_name!r}, but prior to execution of \" \\\n                \"{mod_name!r}; this may result in unpredictable \" \\\n                \"behaviour\".format(mod_name=mod_name, pkg_name=pkg_name)\n            warn(RuntimeWarning(msg))\n\n    try:\n        spec = importlib.util.find_spec(mod_name)\n    except (ImportError, AttributeError, TypeError, ValueError) as ex:\n        # This hack fixes an impedance mismatch between pkgutil and\n        # importlib, where the latter raises other errors for cases where\n        # pkgutil previously raised ImportError\n        msg = \"Error while finding module specification for {!r} ({}: {})\"\n        raise error(msg.format(mod_name, type(ex).__name__, ex)) from ex\n    if spec is None:\n        raise error(\"No module named %s\" % mod_name)\n    if spec.submodule_search_locations is not None:\n        if mod_name == \"__main__\" or mod_name.endswith(\".__main__\"):\n            raise error(\"Cannot use package as __main__ module\")\n        try:\n            pkg_main_name = mod_name + \".__main__\"\n            return _get_module_details(pkg_main_name, error)\n        except error as e:\n            if mod_name not in sys.modules:\n                raise  # No module loaded; being a package is irrelevant\n            raise error((\"%s; %r is a package and cannot \" +\n                               \"be directly executed\") %(e, mod_name))\n    loader = spec.loader\n    if loader is None:\n        raise error(\"%r is a namespace package and cannot be executed\"\n                                                                 % mod_name)\n    try:\n        code = loader.get_code(mod_name)\n    except ImportError as e:\n        raise error(format(e)) from e\n    if code is None:\n        raise error(\"No code object available for %s\" % mod_name)\n    return mod_name, spec, code\n\nclass _Error(Exception):\n    \"\"\"Error that _run_module_as_main() should report without a traceback\"\"\"\n\n# XXX ncoghlan: Should this be documented and made public?\n# (Current thoughts: don't repeat the mistake that lead to its\n# creation when run_module() no longer met the needs of\n# mainmodule.c, but couldn't be changed because it was public)\ndef _run_module_as_main(mod_name, alter_argv=True):\n    \"\"\"Runs the designated module in the __main__ namespace\n\n       Note that the executed module will have full access to the\n       __main__ namespace. If this is not desirable, the run_module()\n       function should be used to run the module code in a fresh namespace.\n\n       At the very least, these variables in __main__ will be overwritten:\n           __name__\n           __file__\n           __cached__\n           __loader__\n           __package__\n    \"\"\"\n    try:\n        if alter_argv or mod_name != \"__main__\": # i.e. -m switch\n            mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\n        else:          # i.e. directory or zipfile execution\n            mod_name, mod_spec, code = _get_main_module_details(_Error)\n    except _Error as exc:\n        msg = \"%s: %s\" % (sys.executable, exc)\n        sys.exit(msg)\n    main_globals = sys.modules[\"__main__\"].__dict__\n    if alter_argv:\n        sys.argv[0] = mod_spec.origin\n    return _run_code(code, main_globals, None,\n                     \"__main__\", mod_spec)\n\ndef run_module(mod_name, init_globals=None,\n               run_name=None, alter_sys=False):\n    \"\"\"Execute a module's code without importing it\n\n       Returns the resulting top level namespace dictionary\n    \"\"\"\n    mod_name, mod_spec, code = _get_module_details(mod_name)\n    if run_name is None:\n        run_name = mod_name\n    if alter_sys:\n        return _run_module_code(code, init_globals, run_name, mod_spec)\n    else:\n        # Leave the sys module alone\n        return _run_code(code, {}, init_globals, run_name, mod_spec)\n\ndef _get_main_module_details(error=ImportError):\n    # Helper that gives a nicer error message when attempting to\n    # execute a zipfile or directory by invoking __main__.py\n    # Also moves the standard __main__ out of the way so that the\n    # preexisting __loader__ entry doesn't cause issues\n    main_name = \"__main__\"\n    saved_main = sys.modules[main_name]\n    del sys.modules[main_name]\n    try:\n        return _get_module_details(main_name)\n    except ImportError as exc:\n        if main_name in str(exc):\n            raise error(\"can't find %r module in %r\" %\n                              (main_name, sys.path[0])) from exc\n        raise\n    finally:\n        sys.modules[main_name] = saved_main\n\n\ndef _get_code_from_file(run_name, fname):\n    # Check for a compiled file first\n    with open(fname, \"rb\") as f:\n        code = read_code(f)\n    if code is None:\n        # That didn't work, so try it as normal source code\n        with open(fname, \"rb\") as f:\n            code = compile(f.read(), fname, 'exec')\n    return code, fname\n\ndef run_path(path_name, init_globals=None, run_name=None):\n    \"\"\"Execute code located at the specified filesystem location\n\n       Returns the resulting top level namespace dictionary\n\n       The file path may refer directly to a Python script (i.e.\n       one that could be directly executed with execfile) or else\n       it may refer to a zipfile or directory containing a top\n       level __main__.py script.\n    \"\"\"\n    if run_name is None:\n        run_name = \"<run_path>\"\n    pkg_name = run_name.rpartition(\".\")[0]\n    importer = get_importer(path_name)\n    # Trying to avoid importing imp so as to not consume the deprecation warning.\n    is_NullImporter = False\n    if type(importer).__module__ == 'imp':\n        if type(importer).__name__ == 'NullImporter':\n            is_NullImporter = True\n    if isinstance(importer, type(None)) or is_NullImporter:\n        # Not a valid sys.path entry, so run the code directly\n        # execfile() doesn't help as we want to allow compiled files\n        code, fname = _get_code_from_file(run_name, path_name)\n        return _run_module_code(code, init_globals, run_name,\n                                pkg_name=pkg_name, script_name=fname)\n    else:\n        # Finder is defined for path, so add it to\n        # the start of sys.path\n        sys.path.insert(0, path_name)\n        try:\n            # Here's where things are a little different from the run_module\n            # case. There, we only had to replace the module in sys while the\n            # code was running and doing so was somewhat optional. Here, we\n            # have no choice and we have to remove it even while we read the\n            # code. If we don't do this, a __loader__ attribute in the\n            # existing __main__ module may prevent location of the new module.\n            mod_name, mod_spec, code = _get_main_module_details()\n            with _TempModule(run_name) as temp_module, \\\n                 _ModifiedArgv0(path_name):\n                mod_globals = temp_module.module.__dict__\n                return _run_code(code, mod_globals, init_globals,\n                                    run_name, mod_spec, pkg_name).copy()\n        finally:\n            try:\n                sys.path.remove(path_name)\n            except ValueError:\n                pass\n\n\nif __name__ == \"__main__\":\n    # Run the module specified as the next command line argument\n    if len(sys.argv) < 2:\n        print(\"No module specified for execution\", file=sys.stderr)\n    else:\n        del sys.argv[0] # Make the requested module sys.argv[0]\n        _run_module_as_main(sys.argv[0])\n", 294], "C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py": ["#\n# Module providing various facilities to other parts of the package\n#\n# multiprocessing/util.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport itertools\nimport sys\nimport weakref\nimport atexit\nimport threading        # we want threading to install it's\n                        # cleanup function before multiprocessing does\nfrom subprocess import _args_from_interpreter_flags\n\nfrom . import process\n\n__all__ = [\n    'sub_debug', 'debug', 'info', 'sub_warning', 'get_logger',\n    'log_to_stderr', 'get_temp_dir', 'register_after_fork',\n    'is_exiting', 'Finalize', 'ForkAwareThreadLock', 'ForkAwareLocal',\n    'close_all_fds_except', 'SUBDEBUG', 'SUBWARNING',\n    ]\n\n#\n# Logging\n#\n\nNOTSET = 0\nSUBDEBUG = 5\nDEBUG = 10\nINFO = 20\nSUBWARNING = 25\n\nLOGGER_NAME = 'multiprocessing'\nDEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'\n\n_logger = None\n_log_to_stderr = False\n\ndef sub_debug(msg, *args):\n    if _logger:\n        _logger.log(SUBDEBUG, msg, *args)\n\ndef debug(msg, *args):\n    if _logger:\n        _logger.log(DEBUG, msg, *args)\n\ndef info(msg, *args):\n    if _logger:\n        _logger.log(INFO, msg, *args)\n\ndef sub_warning(msg, *args):\n    if _logger:\n        _logger.log(SUBWARNING, msg, *args)\n\ndef get_logger():\n    '''\n    Returns logger used by multiprocessing\n    '''\n    global _logger\n    import logging\n\n    logging._acquireLock()\n    try:\n        if not _logger:\n\n            _logger = logging.getLogger(LOGGER_NAME)\n            _logger.propagate = 0\n\n            # XXX multiprocessing should cleanup before logging\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(_exit_function)\n                atexit.register(_exit_function)\n            else:\n                atexit._exithandlers.remove((_exit_function, (), {}))\n                atexit._exithandlers.append((_exit_function, (), {}))\n\n    finally:\n        logging._releaseLock()\n\n    return _logger\n\ndef log_to_stderr(level=None):\n    '''\n    Turn on logging and add a handler which prints to stderr\n    '''\n    global _log_to_stderr\n    import logging\n\n    logger = get_logger()\n    formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    if level:\n        logger.setLevel(level)\n    _log_to_stderr = True\n    return _logger\n\n#\n# Function returning a temp directory which will be removed on exit\n#\n\ndef _remove_temp_dir(rmtree, tempdir):\n    rmtree(tempdir)\n\n    current_process = process.current_process()\n    # current_process() can be None if the finalizer is called\n    # late during Python finalization\n    if current_process is not None:\n        current_process._config['tempdir'] = None\n\ndef get_temp_dir():\n    # get name of a temp directory which will be automatically cleaned up\n    tempdir = process.current_process()._config.get('tempdir')\n    if tempdir is None:\n        import shutil, tempfile\n        tempdir = tempfile.mkdtemp(prefix='pymp-')\n        info('created temp directory %s', tempdir)\n        # keep a strong reference to shutil.rmtree(), since the finalizer\n        # can be called late during Python shutdown\n        Finalize(None, _remove_temp_dir, args=(shutil.rmtree, tempdir),\n                 exitpriority=-100)\n        process.current_process()._config['tempdir'] = tempdir\n    return tempdir\n\n#\n# Support for reinitialization of objects when bootstrapping a child process\n#\n\n_afterfork_registry = weakref.WeakValueDictionary()\n_afterfork_counter = itertools.count()\n\ndef _run_after_forkers():\n    items = list(_afterfork_registry.items())\n    items.sort()\n    for (index, ident, func), obj in items:\n        try:\n            func(obj)\n        except Exception as e:\n            info('after forker raised exception %s', e)\n\ndef register_after_fork(obj, func):\n    _afterfork_registry[(next(_afterfork_counter), id(obj), func)] = obj\n\n#\n# Finalization using weakrefs\n#\n\n_finalizer_registry = {}\n_finalizer_counter = itertools.count()\n\n\nclass Finalize(object):\n    '''\n    Class which supports object finalization using weakrefs\n    '''\n    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):\n        if (exitpriority is not None) and not isinstance(exitpriority,int):\n            raise TypeError(\n                \"Exitpriority ({0!r}) must be None or int, not {1!s}\".format(\n                    exitpriority, type(exitpriority)))\n\n        if obj is not None:\n            self._weakref = weakref.ref(obj, self)\n        elif exitpriority is None:\n            raise ValueError(\"Without object, exitpriority cannot be None\")\n\n        self._callback = callback\n        self._args = args\n        self._kwargs = kwargs or {}\n        self._key = (exitpriority, next(_finalizer_counter))\n        self._pid = os.getpid()\n\n        _finalizer_registry[self._key] = self\n\n    def __call__(self, wr=None,\n                 # Need to bind these locally because the globals can have\n                 # been cleared at shutdown\n                 _finalizer_registry=_finalizer_registry,\n                 sub_debug=sub_debug, getpid=os.getpid):\n        '''\n        Run the callback unless it has already been called or cancelled\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            sub_debug('finalizer no longer registered')\n        else:\n            if self._pid != getpid():\n                sub_debug('finalizer ignored because different process')\n                res = None\n            else:\n                sub_debug('finalizer calling %s with args %s and kwargs %s',\n                          self._callback, self._args, self._kwargs)\n                res = self._callback(*self._args, **self._kwargs)\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n            return res\n\n    def cancel(self):\n        '''\n        Cancel finalization of the object\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            pass\n        else:\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n\n    def still_active(self):\n        '''\n        Return whether this finalizer is still waiting to invoke callback\n        '''\n        return self._key in _finalizer_registry\n\n    def __repr__(self):\n        try:\n            obj = self._weakref()\n        except (AttributeError, TypeError):\n            obj = None\n\n        if obj is None:\n            return '<%s object, dead>' % self.__class__.__name__\n\n        x = '<%s object, callback=%s' % (\n                self.__class__.__name__,\n                getattr(self._callback, '__name__', self._callback))\n        if self._args:\n            x += ', args=' + str(self._args)\n        if self._kwargs:\n            x += ', kwargs=' + str(self._kwargs)\n        if self._key[0] is not None:\n            x += ', exitpriority=' + str(self._key[0])\n        return x + '>'\n\n\ndef _run_finalizers(minpriority=None):\n    '''\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    '''\n    if _finalizer_registry is None:\n        # This function may be called after this module's globals are\n        # destroyed.  See the _exit_function function in this module for more\n        # notes.\n        return\n\n    if minpriority is None:\n        f = lambda p : p[0] is not None\n    else:\n        f = lambda p : p[0] is not None and p[0] >= minpriority\n\n    # Careful: _finalizer_registry may be mutated while this function\n    # is running (either by a GC run or by another thread).\n\n    # list(_finalizer_registry) should be atomic, while\n    # list(_finalizer_registry.items()) is not.\n    keys = [key for key in list(_finalizer_registry) if f(key)]\n    keys.sort(reverse=True)\n\n    for key in keys:\n        finalizer = _finalizer_registry.get(key)\n        # key may have been removed from the registry\n        if finalizer is not None:\n            sub_debug('calling %s', finalizer)\n            try:\n                finalizer()\n            except Exception:\n                import traceback\n                traceback.print_exc()\n\n    if minpriority is None:\n        _finalizer_registry.clear()\n\n#\n# Clean up on exit\n#\n\ndef is_exiting():\n    '''\n    Returns true if the process is shutting down\n    '''\n    return _exiting or _exiting is None\n\n_exiting = False\n\ndef _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,\n                   active_children=process.active_children,\n                   current_process=process.current_process):\n    # We hold on to references to functions in the arglist due to the\n    # situation described below, where this function is called after this\n    # module's globals are destroyed.\n\n    global _exiting\n\n    if not _exiting:\n        _exiting = True\n\n        info('process shutting down')\n        debug('running all \"atexit\" finalizers with priority >= 0')\n        _run_finalizers(0)\n\n        if current_process() is not None:\n            # We check if the current process is None here because if\n            # it's None, any call to ``active_children()`` will raise\n            # an AttributeError (active_children winds up trying to\n            # get attributes from util._current_process).  One\n            # situation where this can happen is if someone has\n            # manipulated sys.modules, causing this module to be\n            # garbage collected.  The destructor for the module type\n            # then replaces all values in the module dict with None.\n            # For instance, after setuptools runs a test it replaces\n            # sys.modules with a copy created earlier.  See issues\n            # #9775 and #15881.  Also related: #4106, #9205, and\n            # #9207.\n\n            for p in active_children():\n                if p.daemon:\n                    info('calling terminate() for daemon %s', p.name)\n                    p._popen.terminate()\n\n            for p in active_children():\n                info('calling join() for process %s', p.name)\n                p.join()\n\n        debug('running the remaining \"atexit\" finalizers')\n        _run_finalizers()\n\natexit.register(_exit_function)\n\n#\n# Some fork aware types\n#\n\nclass ForkAwareThreadLock(object):\n    def __init__(self):\n        self._reset()\n        register_after_fork(self, ForkAwareThreadLock._reset)\n\n    def _reset(self):\n        self._lock = threading.Lock()\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n\nclass ForkAwareLocal(threading.local):\n    def __init__(self):\n        register_after_fork(self, lambda obj : obj.__dict__.clear())\n    def __reduce__(self):\n        return type(self), ()\n\n#\n# Close fds except those specified\n#\n\ntry:\n    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\nexcept Exception:\n    MAXFD = 256\n\ndef close_all_fds_except(fds):\n    fds = list(fds) + [-1, MAXFD]\n    fds.sort()\n    assert fds[-1] == MAXFD, 'fd too large'\n    for i in range(len(fds) - 1):\n        os.closerange(fds[i]+1, fds[i+1])\n#\n# Close sys.stdin and replace stdin with os.devnull\n#\n\ndef _close_stdin():\n    if sys.stdin is None:\n        return\n\n    try:\n        sys.stdin.close()\n    except (OSError, ValueError):\n        pass\n\n    try:\n        fd = os.open(os.devnull, os.O_RDONLY)\n        try:\n            sys.stdin = open(fd, closefd=False)\n        except:\n            os.close(fd)\n            raise\n    except (OSError, ValueError):\n        pass\n\n#\n# Flush standard streams, if any\n#\n\ndef _flush_std_streams():\n    try:\n        sys.stdout.flush()\n    except (AttributeError, ValueError):\n        pass\n    try:\n        sys.stderr.flush()\n    except (AttributeError, ValueError):\n        pass\n\n#\n# Start a program with only specified fds kept open\n#\n\ndef spawnv_passfds(path, args, passfds):\n    import _posixsubprocess\n    passfds = tuple(sorted(map(int, passfds)))\n    errpipe_read, errpipe_write = os.pipe()\n    try:\n        return _posixsubprocess.fork_exec(\n            args, [os.fsencode(path)], True, passfds, None, None,\n            -1, -1, -1, -1, -1, -1, errpipe_read, errpipe_write,\n            False, False, None)\n    finally:\n        os.close(errpipe_read)\n        os.close(errpipe_write)\n\n\ndef close_fds(*fds):\n    \"\"\"Close each file descriptor given as an argument\"\"\"\n    for fd in fds:\n        os.close(fd)\n", 441], "C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py": ["#\n# Module providing the `Process` class which emulates `threading.Thread`\n#\n# multiprocessing/process.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['BaseProcess', 'current_process', 'active_children',\n           'parent_process']\n\n#\n# Imports\n#\n\nimport os\nimport sys\nimport signal\nimport itertools\nimport threading\nfrom _weakrefset import WeakSet\n\n#\n#\n#\n\ntry:\n    ORIGINAL_DIR = os.path.abspath(os.getcwd())\nexcept OSError:\n    ORIGINAL_DIR = None\n\n#\n# Public functions\n#\n\ndef current_process():\n    '''\n    Return process object representing the current process\n    '''\n    return _current_process\n\ndef active_children():\n    '''\n    Return list of process objects corresponding to live child processes\n    '''\n    _cleanup()\n    return list(_children)\n\n\ndef parent_process():\n    '''\n    Return process object representing the parent process\n    '''\n    return _parent_process\n\n#\n#\n#\n\ndef _cleanup():\n    # check for processes which have finished\n    for p in list(_children):\n        if p._popen.poll() is not None:\n            _children.discard(p)\n\n#\n# The `Process` class\n#\n\nclass BaseProcess(object):\n    '''\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    '''\n    def _Popen(self):\n        raise NotImplementedError\n\n    def __init__(self, group=None, target=None, name=None, args=(), kwargs={},\n                 *, daemon=None):\n        assert group is None, 'group argument must be None for now'\n        count = next(_process_counter)\n        self._identity = _current_process._identity + (count,)\n        self._config = _current_process._config.copy()\n        self._parent_pid = os.getpid()\n        self._parent_name = _current_process.name\n        self._popen = None\n        self._closed = False\n        self._target = target\n        self._args = tuple(args)\n        self._kwargs = dict(kwargs)\n        self._name = name or type(self).__name__ + '-' + \\\n                     ':'.join(str(i) for i in self._identity)\n        if daemon is not None:\n            self.daemon = daemon\n        _dangling.add(self)\n\n    def _check_closed(self):\n        if self._closed:\n            raise ValueError(\"process object is closed\")\n\n    def run(self):\n        '''\n        Method to be run in sub-process; can be overridden in sub-class\n        '''\n        if self._target:\n            self._target(*self._args, **self._kwargs)\n\n    def start(self):\n        '''\n        Start child process\n        '''\n        self._check_closed()\n        assert self._popen is None, 'cannot start a process twice'\n        assert self._parent_pid == os.getpid(), \\\n               'can only start a process object created by current process'\n        assert not _current_process._config.get('daemon'), \\\n               'daemonic processes are not allowed to have children'\n        _cleanup()\n        self._popen = self._Popen(self)\n        self._sentinel = self._popen.sentinel\n        # Avoid a refcycle if the target function holds an indirect\n        # reference to the process object (see bpo-30775)\n        del self._target, self._args, self._kwargs\n        _children.add(self)\n\n    def terminate(self):\n        '''\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.terminate()\n\n    def kill(self):\n        '''\n        Terminate process; sends SIGKILL signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.kill()\n\n    def join(self, timeout=None):\n        '''\n        Wait until child process terminates\n        '''\n        self._check_closed()\n        assert self._parent_pid == os.getpid(), 'can only join a child process'\n        assert self._popen is not None, 'can only join a started process'\n        res = self._popen.wait(timeout)\n        if res is not None:\n            _children.discard(self)\n\n    def is_alive(self):\n        '''\n        Return whether process is alive\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return True\n        assert self._parent_pid == os.getpid(), 'can only test a child process'\n\n        if self._popen is None:\n            return False\n\n        returncode = self._popen.poll()\n        if returncode is None:\n            return True\n        else:\n            _children.discard(self)\n            return False\n\n    def close(self):\n        '''\n        Close the Process object.\n\n        This method releases resources held by the Process object.  It is\n        an error to call this method if the child process is still running.\n        '''\n        if self._popen is not None:\n            if self._popen.poll() is None:\n                raise ValueError(\"Cannot close a process while it is still running. \"\n                                 \"You should first call join() or terminate().\")\n            self._popen.close()\n            self._popen = None\n            del self._sentinel\n            _children.discard(self)\n        self._closed = True\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert isinstance(name, str), 'name must be a string'\n        self._name = name\n\n    @property\n    def daemon(self):\n        '''\n        Return whether process is a daemon\n        '''\n        return self._config.get('daemon', False)\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        '''\n        Set whether process is a daemon\n        '''\n        assert self._popen is None, 'process has already started'\n        self._config['daemon'] = daemonic\n\n    @property\n    def authkey(self):\n        return self._config['authkey']\n\n    @authkey.setter\n    def authkey(self, authkey):\n        '''\n        Set authorization key of process\n        '''\n        self._config['authkey'] = AuthenticationString(authkey)\n\n    @property\n    def exitcode(self):\n        '''\n        Return exit code of process or `None` if it has yet to stop\n        '''\n        self._check_closed()\n        if self._popen is None:\n            return self._popen\n        return self._popen.poll()\n\n    @property\n    def ident(self):\n        '''\n        Return identifier (PID) of process or `None` if it has yet to start\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return os.getpid()\n        else:\n            return self._popen and self._popen.pid\n\n    pid = ident\n\n    @property\n    def sentinel(self):\n        '''\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        '''\n        self._check_closed()\n        try:\n            return self._sentinel\n        except AttributeError:\n            raise ValueError(\"process not started\") from None\n\n    def __repr__(self):\n        exitcode = None\n        if self is _current_process:\n            status = 'started'\n        elif self._closed:\n            status = 'closed'\n        elif self._parent_pid != os.getpid():\n            status = 'unknown'\n        elif self._popen is None:\n            status = 'initial'\n        else:\n            exitcode = self._popen.poll()\n            if exitcode is not None:\n                status = 'stopped'\n            else:\n                status = 'started'\n\n        info = [type(self).__name__, 'name=%r' % self._name]\n        if self._popen is not None:\n            info.append('pid=%s' % self._popen.pid)\n        info.append('parent=%s' % self._parent_pid)\n        info.append(status)\n        if exitcode is not None:\n            exitcode = _exitcode_to_name.get(exitcode, exitcode)\n            info.append('exitcode=%s' % exitcode)\n        if self.daemon:\n            info.append('daemon')\n        return '<%s>' % ' '.join(info)\n\n    ##\n\n    def _bootstrap(self, parent_sentinel=None):\n        from . import util, context\n        global _current_process, _parent_process, _process_counter, _children\n\n        try:\n            if self._start_method is not None:\n                context._force_start_method(self._start_method)\n            _process_counter = itertools.count(1)\n            _children = set()\n            util._close_stdin()\n            old_process = _current_process\n            _current_process = self\n            _parent_process = _ParentProcess(\n                self._parent_name, self._parent_pid, parent_sentinel)\n            try:\n                util._finalizer_registry.clear()\n                util._run_after_forkers()\n            finally:\n                # delay finalization of the old process object until after\n                # _run_after_forkers() is executed\n                del old_process\n            util.info('child process calling self.run()')\n            try:\n                self.run()\n                exitcode = 0\n            finally:\n                util._exit_function()\n        except SystemExit as e:\n            if not e.args:\n                exitcode = 1\n            elif isinstance(e.args[0], int):\n                exitcode = e.args[0]\n            else:\n                sys.stderr.write(str(e.args[0]) + '\\n')\n                exitcode = 1\n        except:\n            exitcode = 1\n            import traceback\n            sys.stderr.write('Process %s:\\n' % self.name)\n            traceback.print_exc()\n        finally:\n            threading._shutdown()\n            util.info('process exiting with exitcode %d' % exitcode)\n            util._flush_std_streams()\n\n        return exitcode\n\n#\n# We subclass bytes to avoid accidental transmission of auth keys over network\n#\n\nclass AuthenticationString(bytes):\n    def __reduce__(self):\n        from .context import get_spawning_popen\n        if get_spawning_popen() is None:\n            raise TypeError(\n                'Pickling an AuthenticationString object is '\n                'disallowed for security reasons'\n                )\n        return AuthenticationString, (bytes(self),)\n\n\n#\n# Create object representing the parent process\n#\n\nclass _ParentProcess(BaseProcess):\n\n    def __init__(self, name, pid, sentinel):\n        self._identity = ()\n        self._name = name\n        self._pid = pid\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._sentinel = sentinel\n        self._config = {}\n\n    def is_alive(self):\n        from multiprocessing.connection import wait\n        return not wait([self._sentinel], timeout=0)\n\n    @property\n    def ident(self):\n        return self._pid\n\n    def join(self, timeout=None):\n        '''\n        Wait until parent process terminates\n        '''\n        from multiprocessing.connection import wait\n        wait([self._sentinel], timeout=timeout)\n\n    pid = ident\n\n#\n# Create object representing the main process\n#\n\nclass _MainProcess(BaseProcess):\n\n    def __init__(self):\n        self._identity = ()\n        self._name = 'MainProcess'\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._config = {'authkey': AuthenticationString(os.urandom(32)),\n                        'semprefix': '/mp'}\n        # Note that some versions of FreeBSD only allow named\n        # semaphores to have names of up to 14 characters.  Therefore\n        # we choose a short prefix.\n        #\n        # On MacOSX in a sandbox it may be necessary to use a\n        # different prefix -- see #19478.\n        #\n        # Everything in self._config will be inherited by descendant\n        # processes.\n\n    def close(self):\n        pass\n\n\n_parent_process = None\n_current_process = _MainProcess()\n_process_counter = itertools.count(1)\n_children = set()\ndel _MainProcess\n\n#\n# Give names to some return codes\n#\n\n_exitcode_to_name = {}\n\nfor name, signum in list(signal.__dict__.items()):\n    if name[:3]=='SIG' and '_' not in name:\n        _exitcode_to_name[-signum] = f'-{name}'\n\n# For debug and leak testing\n_dangling = WeakSet()\n", 430]}, "functions": {"find_spec (C:\\Program Files\\Python38\\lib\\importlib\\util.py:73)": ["C:\\Program Files\\Python38\\lib\\importlib\\util.py", 73], "_get_module_details (C:\\Program Files\\Python38\\lib\\runpy.py:102)": ["C:\\Program Files\\Python38\\lib\\runpy.py", 102], "run_module (C:\\Program Files\\Python38\\lib\\runpy.py:195)": ["C:\\Program Files\\Python38\\lib\\runpy.py", 195], "info (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:52)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 52], "debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:48)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 48], "<lambda> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:261)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 261], "<listcomp> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:268)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 268], "_run_finalizers (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:245)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 245], "current_process (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:37)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py", 37], "_cleanup (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:61)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py", 61], "active_children (C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py:43)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\process.py", 43], "<lambda> (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:259)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 259], "sub_debug (C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py:44)": ["C:\\Program Files\\Python38\\lib\\multiprocessing\\util.py", 44]}}}